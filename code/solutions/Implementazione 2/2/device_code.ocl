
kernel void split 			( 
							 global int  * restrict input, 
							 global int  * restrict smaller_pivot,
							 global int  * restrict greater_pivot,
							 global int2 * restrict delimiters,
							 global int  * restrict map

							) {

	//Ogni Work-Item preleva il suo global id				   
	int idx=get_global_id(0);

	//Variabili che conterranno rispettivamente: 
	//l'inizio del sottoproblema, 
	//la fine del sottoproblema, 
	//e l'indice del sottoproblema nell'array delimtiers
	int start = -1;
	int end= -1;
	int i = 0;
	//Valore del Work-Item
	int value= map[idx];


	//Determinazione del sotto-array da ordinare da parte dei Work-Item
	while ( delimiters[i].x != (-1) && delimiters[i].y != (-1) ) {
		if (value >= delimiters[i].x && value <= delimiters[i].y) {
			start = delimiters[i].x;
			end = delimiters[i].y;
			break;
		}
		i++;
	}

	//Il Work-Item che ha il Pivot come elemento esce
	if (value==end) return; 

	int pivot_val = input [end];

	//Smistamento dei valori nelle due partizioni
	if (input[value] <= pivot_val) {

		//Caso in cui il valore in esame e' piu' piccolo o uguale a pivot
		smaller_pivot[value] = input[value]; 
	}else{

		//Caso in cui il valore in esame e' piu' grande del pivot
		greater_pivot[value] = input[value];
	}

}

kernel void fill 	( 
						global int  * restrict  input,
						global int  * restrict  smaller_pivot,
						global int  * restrict  greater_pivot,
						global int2 * restrict  delimiters,
						global int2 * restrict  app
					){

	//Ogni Work-Item preleva il suo global id
	int idx = get_global_id(0);

	//Ogni Work-Item preleva l'indice del sotto-problema nell'array delimiters
	int problem_idx = idx;

	//Ogni Work-Item preleva l'inizio e la fine del suo sottoproblema
	int start = delimiters[idx].x;
	int end = delimiters[idx].y;

		
	//Fase di aggiornamento del vettore di input con i dati aggiornati

	
	int index = start;

	for (int z=start; z < end; z++ ) {
		if (smaller_pivot[z] != (-1)) {
			input[index] = smaller_pivot[z];
			smaller_pivot[z] = -1;
			index++;
		}
	}

	int pivot_idx = index;
	input[pivot_idx] = input[end];
	index++;

	for (int z=start; z < end; z++) {
		if (greater_pivot[z] != (-1)) {
			input[index] = greater_pivot[z];
			greater_pivot[z] = -1;
			index++;
		}
	}

	//Fase di Aggiustamento del Vettore delimiters
	int is_left_none = 0;
	int is_right_none = 0;

	//Caso in cui il pivot è il primo o il secondo elemento
	if (pivot_idx-1 <= start) {
		app[problem_idx*2] = (int2) (-1,-1);
		is_left_none=1;
	}

	//Caso in cui il pivot è l'ultimo o il penultimo elemento
	if (pivot_idx+1 >= end) {
		app[(problem_idx*2)+1] = (int2) (-1,-1);
		is_right_none=1; 
	}

	//Caso in cui il pivot NON è il primo o il secondo elemento
	if (is_left_none==0) {
		app[problem_idx*2] = (int2) (start,pivot_idx-1);
	}

	//Caso in cui il pivot NON l'ultimo o il penultimo elemento
	if (is_right_none==0) {
		app[(problem_idx*2)+1] = (int2) (pivot_idx+1,end);
	}

}
